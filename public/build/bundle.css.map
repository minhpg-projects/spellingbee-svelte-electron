{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../card.svelte"
  ],
  "sourcesContent": [
    "<script>\n\texport let name;\n\timport Card from './components/card.svelte'\n</script>\n\n<main>\n\t<Card />\n</main>\n\n<style>\nmain {margin: 0; height: 100%; overflow: hidden}\n</style>",
    "<script>\n    const msg = new SpeechSynthesisUtterance();\n    msg.voiceURI = \"native\";\n    msg.volume = 1; // 0 to 1\n    msg.rate = 1; // 0.1 to 10\n    msg.lang = \"en-US\";\n    const speak = (text) => {\n        msg.text = text;\n        speechSynthesis.speak(msg);\n    };\n\n    import loadFile from \"../loadFile\";\n    import {\n        timer,\n        isRunning,\n        isComplete,\n        time,\n    } from \"../store/countdownTimer\";\n\n    let words = [];\n    let word_count = 0;\n    $: word = words[word_count] || \"please load a word list!\"; //`${word_count}. ${words[word_count]}`;\n    $: loaded = false\n    const forwardWord = () => {\n        timer.reset()\n        if (word_count < words.length - 1) {\n            word_count += 1;\n        } else {\n            word_count = 0;\n        }\n    };\n    const backwardWord = () => {\n        timer.reset()\n        if (word_count > 0) {\n            word_count -= 1;\n        } else {\n            word_count = words.length - 1;\n        }\n    };\n    const resetWord = () => {\n        timer.reset()\n        word_count = 0;\n    };\n\n    const loadWordList = async () => {\n        words = await loadFile();\n        if(words) {\n            loaded = true\n            timer.reset()\n        }\n    };\n    const startTimer = () => {\n        if(isComplete){\n            forwardWord()\n        }\n        timer.reset()\n        timer.start();\n    };\n\n    const stopTimer = () => {\n        timer.pause();\n    };\n\n</script>\n\n<nav class=\"navbar is-black\">\n    <div class=\"navbar-brand\">\n        <div class=\"navbar-item\">\n            <img src=\"isv_logo.png\" />\n        </div>\n        {#if loaded}\n        <a on:click={() => backwardWord()} class=\"navbar-item\">\n            <i class=\"fa fa-chevron-left\" />\n        </a>\n        <a on:click={() => forwardWord()} class=\"navbar-item\">\n            <i class=\"fa fa-chevron-right\" />\n        </a>\n        <a on:click={() => resetWord()} class=\"navbar-item\">\n            <i class=\"fa fa-undo\" />\n        </a>\n\n        <a on:click={() => startTimer()} class=\"navbar-item\">\n            <i class=\"fa fa-flag\" />\n        </a>\n        <a on:click={() => stopTimer()} class=\"navbar-item\">\n            <i class=\"fa fa-ban\" />\n        </a>\n        {/if}\n        <a on:click={() => loadWordList()} class=\"navbar-item\">\n            <i class=\"fa fa-folder-open\" />\n        </a>\n        {#if loaded}\n            <h1 class=\"navbar-item\">{words.length} words loaded!</h1>\n        {/if}\n    </div>\n</nav>\n\n<section\n    class=\n    \"hero\n    is-{isComplete ? 'danger' : 'success'}\n    is-fullheight-with-navbar\n    \">\n    <div class=\"hero-body columns is-desktop is-vcentered is-centered\">\n        <div class=\"is-align-self-center\">\n            {#if isComplete}\n            <h1 class=\"title\">{word}</h1>\n            {:else}\n            <h1 class=\"title\">{$time}</h1>\n            {/if}\n        </div>\n    </div>\n</section>\n\n<style>\n    * {\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n        -webkit-user-drag: none;\n        -khtml-user-drag: none;\n        -moz-user-drag: none;\n        -o-user-drag: none;\n        user-drag: none;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAUA,IAAI,eAAC,CAAC,MAAM,CAAE,CAAC,CAAE,MAAM,CAAE,IAAI,CAAE,QAAQ,CAAE,MAAM,CAAC;ACyG5C,cAAE,CAAC,AACC,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,iBAAiB,CAAE,IAAI,CACvB,gBAAgB,CAAE,IAAI,CACtB,cAAc,CAAE,IAAI,CACpB,YAAY,CAAE,IAAI,CAClB,SAAS,CAAE,IAAI,AACnB,CAAC"
}